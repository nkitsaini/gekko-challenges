<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="242166"><g><title>decrypt`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (537 samples, 0.22%)</title><rect x="0.0004%" y="149" width="0.2217%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="537"/><text x="0.2504%" y="159.50"></text></g><g><title>decrypt`DYLD-STUB$$free (712 samples, 0.29%)</title><rect x="0.2222%" y="149" width="0.2940%" height="15" fill="rgb(217,0,24)" fg:x="538" fg:w="712"/><text x="0.4722%" y="159.50"></text></g><g><title>decrypt`DYLD-STUB$$malloc (442 samples, 0.18%)</title><rect x="0.5162%" y="149" width="0.1825%" height="15" fill="rgb(221,193,54)" fg:x="1250" fg:w="442"/><text x="0.7662%" y="159.50"></text></g><g><title>decrypt`__rdl_alloc (527 samples, 0.22%)</title><rect x="0.6987%" y="149" width="0.2176%" height="15" fill="rgb(248,212,6)" fg:x="1692" fg:w="527"/><text x="0.9487%" y="159.50"></text></g><g><title>decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (854 samples, 0.35%)</title><rect x="0.9250%" y="149" width="0.3527%" height="15" fill="rgb(208,68,35)" fg:x="2240" fg:w="854"/><text x="1.1750%" y="159.50"></text></g><g><title>decrypt`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23,770 samples, 9.82%)</title><rect x="17.7795%" y="117" width="9.8156%" height="15" fill="rgb(232,128,0)" fg:x="43056" fg:w="23770"/><text x="18.0295%" y="127.50">decrypt`&lt;core:..</text></g><g><title>decrypt`DYLD-STUB$$malloc (567 samples, 0.23%)</title><rect x="28.1567%" y="101" width="0.2341%" height="15" fill="rgb(207,160,47)" fg:x="68186" fg:w="567"/><text x="28.4067%" y="111.50"></text></g><g><title>decrypt`__rdl_alloc (475 samples, 0.20%)</title><rect x="28.3909%" y="101" width="0.1961%" height="15" fill="rgb(228,23,34)" fg:x="68753" fg:w="475"/><text x="28.6409%" y="111.50"></text></g><g><title>decrypt`__rust_alloc (56 samples, 0.02%)</title><rect x="28.5870%" y="101" width="0.0231%" height="15" fill="rgb(218,30,26)" fg:x="69228" fg:w="56"/><text x="28.8370%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (468 samples, 0.19%)</title><rect x="30.5675%" y="69" width="0.1933%" height="15" fill="rgb(220,122,19)" fg:x="74024" fg:w="468"/><text x="30.8175%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8,128 samples, 3.36%)</title><rect x="31.5907%" y="53" width="3.3564%" height="15" fill="rgb(250,228,42)" fg:x="76502" fg:w="8128"/><text x="31.8407%" y="63.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2,968 samples, 1.23%)</title><rect x="33.7215%" y="37" width="1.2256%" height="15" fill="rgb(240,193,28)" fg:x="81662" fg:w="2968"/><text x="33.9715%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14,858 samples, 6.14%)</title><rect x="29.0722%" y="85" width="6.1355%" height="15" fill="rgb(216,20,37)" fg:x="70403" fg:w="14858"/><text x="29.3222%" y="95.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10,769 samples, 4.45%)</title><rect x="30.7607%" y="69" width="4.4469%" height="15" fill="rgb(206,188,39)" fg:x="74492" fg:w="10769"/><text x="31.0107%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (631 samples, 0.26%)</title><rect x="34.9471%" y="53" width="0.2606%" height="15" fill="rgb(217,207,13)" fg:x="84630" fg:w="631"/><text x="35.1971%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (916 samples, 0.38%)</title><rect x="35.2077%" y="85" width="0.3783%" height="15" fill="rgb(231,73,38)" fg:x="85261" fg:w="916"/><text x="35.4577%" y="95.50"></text></g><g><title>decrypt`alloc::raw_vec::finish_grow (17,104 samples, 7.06%)</title><rect x="28.6101%" y="101" width="7.0629%" height="15" fill="rgb(225,20,46)" fg:x="69284" fg:w="17104"/><text x="28.8601%" y="111.50">decrypt`a..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (211 samples, 0.09%)</title><rect x="35.5859%" y="85" width="0.0871%" height="15" fill="rgb(210,31,41)" fg:x="86177" fg:w="211"/><text x="35.8359%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (519 samples, 0.21%)</title><rect x="35.6731%" y="101" width="0.2143%" height="15" fill="rgb(221,200,47)" fg:x="86388" fg:w="519"/><text x="35.9231%" y="111.50"></text></g><g><title>decrypt`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20,084 samples, 8.29%)</title><rect x="27.5951%" y="117" width="8.2935%" height="15" fill="rgb(226,26,5)" fg:x="66826" fg:w="20084"/><text x="27.8451%" y="127.50">decrypt`allo..</text></g><g><title>decrypt`alloc::raw_vec::finish_grow (719 samples, 0.30%)</title><rect x="35.8886%" y="117" width="0.2969%" height="15" fill="rgb(249,33,26)" fg:x="86910" fg:w="719"/><text x="36.1386%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5,392 samples, 2.23%)</title><rect x="38.6537%" y="101" width="2.2266%" height="15" fill="rgb(235,183,28)" fg:x="93606" fg:w="5392"/><text x="38.9037%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`free (11,438 samples, 4.72%)</title><rect x="36.1855%" y="117" width="4.7232%" height="15" fill="rgb(221,5,38)" fg:x="87629" fg:w="11438"/><text x="36.4355%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (69 samples, 0.03%)</title><rect x="40.8802%" y="101" width="0.0285%" height="15" fill="rgb(247,18,42)" fg:x="98998" fg:w="69"/><text x="41.1302%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (531 samples, 0.22%)</title><rect x="40.9087%" y="117" width="0.2193%" height="15" fill="rgb(241,131,45)" fg:x="99067" fg:w="531"/><text x="41.1587%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3,127 samples, 1.29%)</title><rect x="41.1280%" y="117" width="1.2913%" height="15" fill="rgb(249,31,29)" fg:x="99598" fg:w="3127"/><text x="41.3780%" y="127.50"></text></g><g><title>decrypt`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (65,089 samples, 26.88%)</title><rect x="15.9973%" y="133" width="26.8778%" height="15" fill="rgb(225,111,53)" fg:x="38740" fg:w="65089"/><text x="16.2473%" y="143.50">decrypt`&lt;alloc::string::String as core::ite..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1,104 samples, 0.46%)</title><rect x="42.4192%" y="117" width="0.4559%" height="15" fill="rgb(238,160,17)" fg:x="102725" fg:w="1104"/><text x="42.6692%" y="127.50"></text></g><g><title>decrypt`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (763 samples, 0.32%)</title><rect x="42.8751%" y="133" width="0.3151%" height="15" fill="rgb(214,148,48)" fg:x="103829" fg:w="763"/><text x="43.1251%" y="143.50"></text></g><g><title>decrypt`DYLD-STUB$$free (1,419 samples, 0.59%)</title><rect x="43.1902%" y="133" width="0.5860%" height="15" fill="rgb(232,36,49)" fg:x="104592" fg:w="1419"/><text x="43.4402%" y="143.50"></text></g><g><title>decrypt`__rdl_dealloc (133 samples, 0.05%)</title><rect x="43.7774%" y="133" width="0.0549%" height="15" fill="rgb(209,103,24)" fg:x="106014" fg:w="133"/><text x="44.0274%" y="143.50"></text></g><g><title>decrypt`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (900 samples, 0.37%)</title><rect x="43.8360%" y="133" width="0.3716%" height="15" fill="rgb(229,88,8)" fg:x="106156" fg:w="900"/><text x="44.0860%" y="143.50"></text></g><g><title>decrypt`core::hash::BuildHasher::hash_one (3,049 samples, 1.26%)</title><rect x="44.2077%" y="133" width="1.2591%" height="15" fill="rgb(213,181,19)" fg:x="107056" fg:w="3049"/><text x="44.4577%" y="143.50"></text></g><g><title>decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (90 samples, 0.04%)</title><rect x="45.4672%" y="117" width="0.0372%" height="15" fill="rgb(254,191,54)" fg:x="110106" fg:w="90"/><text x="45.7172%" y="127.50"></text></g><g><title>decrypt`hashbrown::raw::RawTable&lt;T,A&gt;::insert (46 samples, 0.02%)</title><rect x="45.4853%" y="101" width="0.0190%" height="15" fill="rgb(241,83,37)" fg:x="110150" fg:w="46"/><text x="45.7353%" y="111.50"></text></g><g><title>decrypt`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (33 samples, 0.01%)</title><rect x="45.4907%" y="85" width="0.0136%" height="15" fill="rgb(233,36,39)" fg:x="110163" fg:w="33"/><text x="45.7407%" y="95.50"></text></g><g><title>decrypt`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (35 samples, 0.01%)</title><rect x="45.5085%" y="53" width="0.0145%" height="15" fill="rgb(226,3,54)" fg:x="110206" fg:w="35"/><text x="45.7585%" y="63.50"></text></g><g><title>decrypt`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (43 samples, 0.02%)</title><rect x="45.5060%" y="69" width="0.0178%" height="15" fill="rgb(245,192,40)" fg:x="110200" fg:w="43"/><text x="45.7560%" y="79.50"></text></g><g><title>decrypt`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (48 samples, 0.02%)</title><rect x="45.5051%" y="85" width="0.0198%" height="15" fill="rgb(238,167,29)" fg:x="110198" fg:w="48"/><text x="45.7551%" y="95.50"></text></g><g><title>decrypt`decrypt::get_words (142 samples, 0.06%)</title><rect x="45.4667%" y="133" width="0.0586%" height="15" fill="rgb(232,182,51)" fg:x="110105" fg:w="142"/><text x="45.7167%" y="143.50"></text></g><g><title>decrypt`serde_json::de::from_str (49 samples, 0.02%)</title><rect x="45.5051%" y="117" width="0.0202%" height="15" fill="rgb(231,60,39)" fg:x="110198" fg:w="49"/><text x="45.7551%" y="127.50"></text></g><g><title>decrypt`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (49 samples, 0.02%)</title><rect x="45.5051%" y="101" width="0.0202%" height="15" fill="rgb(208,69,12)" fg:x="110198" fg:w="49"/><text x="45.7551%" y="111.50"></text></g><g><title>decrypt`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,931 samples, 2.86%)</title><rect x="65.1524%" y="117" width="2.8621%" height="15" fill="rgb(235,93,37)" fg:x="157777" fg:w="6931"/><text x="65.4024%" y="127.50">de..</text></g><g><title>decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (80,907 samples, 33.41%)</title><rect x="45.5254%" y="133" width="33.4097%" height="15" fill="rgb(213,116,39)" fg:x="110247" fg:w="80907"/><text x="45.7754%" y="143.50">decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>decrypt`core::hash::BuildHasher::hash_one (26,446 samples, 10.92%)</title><rect x="68.0145%" y="117" width="10.9206%" height="15" fill="rgb(222,207,29)" fg:x="164708" fg:w="26446"/><text x="68.2645%" y="127.50">decrypt`core::ha..</text></g><g><title>decrypt`&lt;zzz::DefaultTheme as zzz::Theme&gt;::render (33 samples, 0.01%)</title><rect x="78.9351%" y="117" width="0.0136%" height="15" fill="rgb(206,96,30)" fg:x="191154" fg:w="33"/><text x="79.1851%" y="127.50"></text></g><g><title>decrypt`zzz::ProgressBar::redraw (34 samples, 0.01%)</title><rect x="78.9351%" y="133" width="0.0140%" height="15" fill="rgb(218,138,4)" fg:x="191154" fg:w="34"/><text x="79.1851%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5,474 samples, 2.26%)</title><rect x="80.6744%" y="117" width="2.2604%" height="15" fill="rgb(250,191,14)" fg:x="195366" fg:w="5474"/><text x="80.9244%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8,436 samples, 3.48%)</title><rect x="83.8049%" y="101" width="3.4836%" height="15" fill="rgb(239,60,40)" fg:x="202947" fg:w="8436"/><text x="84.0549%" y="111.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2,876 samples, 1.19%)</title><rect x="86.1009%" y="85" width="1.1876%" height="15" fill="rgb(206,27,48)" fg:x="208507" fg:w="2876"/><text x="86.3509%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20,722 samples, 8.56%)</title><rect x="78.9492%" y="133" width="8.5569%" height="15" fill="rgb(225,35,8)" fg:x="191188" fg:w="20722"/><text x="79.1992%" y="143.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11,070 samples, 4.57%)</title><rect x="82.9348%" y="117" width="4.5712%" height="15" fill="rgb(250,213,24)" fg:x="200840" fg:w="11070"/><text x="83.1848%" y="127.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (527 samples, 0.22%)</title><rect x="87.2885%" y="101" width="0.2176%" height="15" fill="rgb(247,123,22)" fg:x="211383" fg:w="527"/><text x="87.5385%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1,060 samples, 0.44%)</title><rect x="87.5061%" y="133" width="0.4377%" height="15" fill="rgb(231,138,38)" fg:x="211910" fg:w="1060"/><text x="87.7561%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1,116 samples, 0.46%)</title><rect x="87.9438%" y="133" width="0.4608%" height="15" fill="rgb(231,145,46)" fg:x="212970" fg:w="1116"/><text x="88.1938%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5,233 samples, 2.16%)</title><rect x="91.6371%" y="117" width="2.1609%" height="15" fill="rgb(251,118,11)" fg:x="221914" fg:w="5233"/><text x="91.8871%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`free (13,114 samples, 5.42%)</title><rect x="88.4046%" y="133" width="5.4153%" height="15" fill="rgb(217,147,25)" fg:x="214086" fg:w="13114"/><text x="88.6546%" y="143.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (53 samples, 0.02%)</title><rect x="93.7981%" y="117" width="0.0219%" height="15" fill="rgb(247,81,37)" fg:x="227147" fg:w="53"/><text x="94.0481%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2,251 samples, 0.93%)</title><rect x="93.8204%" y="133" width="0.9295%" height="15" fill="rgb(209,12,38)" fg:x="227201" fg:w="2251"/><text x="94.0704%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5,548 samples, 2.29%)</title><rect x="94.7499%" y="133" width="2.2910%" height="15" fill="rgb(227,1,9)" fg:x="229452" fg:w="5548"/><text x="94.9999%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (116 samples, 0.05%)</title><rect x="97.0409%" y="133" width="0.0479%" height="15" fill="rgb(248,47,43)" fg:x="235000" fg:w="116"/><text x="97.2909%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (955 samples, 0.39%)</title><rect x="97.0888%" y="133" width="0.3944%" height="15" fill="rgb(221,10,30)" fg:x="235116" fg:w="955"/><text x="97.3388%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (232 samples, 0.10%)</title><rect x="97.4831%" y="133" width="0.0958%" height="15" fill="rgb(210,229,1)" fg:x="236071" fg:w="232"/><text x="97.7331%" y="143.50"></text></g><g><title>decrypt`std::sys_common::backtrace::__rust_begin_short_backtrace (233,211 samples, 96.30%)</title><rect x="1.2776%" y="149" width="96.3021%" height="15" fill="rgb(222,148,37)" fg:x="3094" fg:w="233211"/><text x="1.5276%" y="159.50">decrypt`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (531 samples, 0.22%)</title><rect x="97.5798%" y="149" width="0.2193%" height="15" fill="rgb(234,67,33)" fg:x="236305" fg:w="531"/><text x="97.8298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1,062 samples, 0.44%)</title><rect x="97.7990%" y="149" width="0.4385%" height="15" fill="rgb(247,98,35)" fg:x="236836" fg:w="1062"/><text x="98.0490%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1,620 samples, 0.67%)</title><rect x="98.2376%" y="149" width="0.6690%" height="15" fill="rgb(247,138,52)" fg:x="237898" fg:w="1620"/><text x="98.4876%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1,589 samples, 0.66%)</title><rect x="98.9144%" y="149" width="0.6562%" height="15" fill="rgb(213,79,30)" fg:x="239537" fg:w="1589"/><text x="99.1644%" y="159.50"></text></g><g><title>decrypt`std::sys::unix::thread::Thread::new::thread_start (242,164 samples, 100.00%)</title><rect x="0.0004%" y="181" width="99.9992%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="242164"/><text x="0.2504%" y="191.50">decrypt`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>decrypt`core::ops::function::FnOnce::call_once{{vtable.shim}} (242,164 samples, 100.00%)</title><rect x="0.0004%" y="165" width="99.9992%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="242164"/><text x="0.2504%" y="175.50">decrypt`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,039 samples, 0.43%)</title><rect x="99.5705%" y="149" width="0.4290%" height="15" fill="rgb(216,154,8)" fg:x="241126" fg:w="1039"/><text x="99.8205%" y="159.50"></text></g><g><title>all (242,166 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="242166"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (242,165 samples, 100.00%)</title><rect x="0.0004%" y="213" width="99.9996%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="242165"/><text x="0.2504%" y="223.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (242,165 samples, 100.00%)</title><rect x="0.0004%" y="197" width="99.9996%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="242165"/><text x="0.2504%" y="207.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>