<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="178883"><g><title>decrypt`DYLD-STUB$$free (722 samples, 0.40%)</title><rect x="0.0006%" y="149" width="0.4036%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="722"/><text x="0.2506%" y="159.50"></text></g><g><title>decrypt`DYLD-STUB$$malloc (496 samples, 0.28%)</title><rect x="0.4042%" y="149" width="0.2773%" height="15" fill="rgb(217,0,24)" fg:x="723" fg:w="496"/><text x="0.6542%" y="159.50"></text></g><g><title>decrypt`__rdl_alloc (553 samples, 0.31%)</title><rect x="0.6815%" y="149" width="0.3091%" height="15" fill="rgb(221,193,54)" fg:x="1219" fg:w="553"/><text x="0.9315%" y="159.50"></text></g><g><title>decrypt`__rust_alloc (26 samples, 0.01%)</title><rect x="0.9923%" y="149" width="0.0145%" height="15" fill="rgb(248,212,6)" fg:x="1775" fg:w="26"/><text x="1.2423%" y="159.50"></text></g><g><title>decrypt`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,606 samples, 0.90%)</title><rect x="1.0085%" y="149" width="0.8978%" height="15" fill="rgb(208,68,35)" fg:x="1804" fg:w="1606"/><text x="1.2585%" y="159.50"></text></g><g><title>decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (581 samples, 0.32%)</title><rect x="1.9063%" y="149" width="0.3248%" height="15" fill="rgb(232,128,0)" fg:x="3410" fg:w="581"/><text x="2.1563%" y="159.50"></text></g><g><title>decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.01%)</title><rect x="28.9983%" y="117" width="0.0123%" height="15" fill="rgb(207,160,47)" fg:x="51873" fg:w="22"/><text x="29.2483%" y="127.50"></text></g><g><title>decrypt`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (55 samples, 0.03%)</title><rect x="28.9955%" y="133" width="0.0307%" height="15" fill="rgb(228,23,34)" fg:x="51868" fg:w="55"/><text x="29.2455%" y="143.50"></text></g><g><title>decrypt`DYLD-STUB$$free (716 samples, 0.40%)</title><rect x="29.0296%" y="133" width="0.4003%" height="15" fill="rgb(218,30,26)" fg:x="51929" fg:w="716"/><text x="29.2796%" y="143.50"></text></g><g><title>decrypt`DYLD-STUB$$malloc (737 samples, 0.41%)</title><rect x="29.4299%" y="133" width="0.4120%" height="15" fill="rgb(220,122,19)" fg:x="52645" fg:w="737"/><text x="29.6799%" y="143.50"></text></g><g><title>decrypt`__rdl_alloc (481 samples, 0.27%)</title><rect x="29.8508%" y="133" width="0.2689%" height="15" fill="rgb(250,228,42)" fg:x="53398" fg:w="481"/><text x="30.1008%" y="143.50"></text></g><g><title>decrypt`core::hash::BuildHasher::hash_one (1,409 samples, 0.79%)</title><rect x="30.1208%" y="133" width="0.7877%" height="15" fill="rgb(240,193,28)" fg:x="53881" fg:w="1409"/><text x="30.3708%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (826 samples, 0.46%)</title><rect x="38.4480%" y="101" width="0.4618%" height="15" fill="rgb(216,20,37)" fg:x="68777" fg:w="826"/><text x="38.6980%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7,557 samples, 4.22%)</title><rect x="40.0636%" y="85" width="4.2245%" height="15" fill="rgb(206,188,39)" fg:x="71667" fg:w="7557"/><text x="40.3136%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2,315 samples, 1.29%)</title><rect x="42.9940%" y="69" width="1.2941%" height="15" fill="rgb(217,207,13)" fg:x="76909" fg:w="2315"/><text x="43.2440%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17,689 samples, 9.89%)</title><rect x="34.9882%" y="117" width="9.8886%" height="15" fill="rgb(231,73,38)" fg:x="62588" fg:w="17689"/><text x="35.2382%" y="127.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10,674 samples, 5.97%)</title><rect x="38.9098%" y="101" width="5.9670%" height="15" fill="rgb(225,20,46)" fg:x="69603" fg:w="10674"/><text x="39.1598%" y="111.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1,053 samples, 0.59%)</title><rect x="44.2882%" y="85" width="0.5887%" height="15" fill="rgb(210,31,41)" fg:x="79224" fg:w="1053"/><text x="44.5382%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (969 samples, 0.54%)</title><rect x="44.8768%" y="117" width="0.5417%" height="15" fill="rgb(221,200,47)" fg:x="80277" fg:w="969"/><text x="45.1268%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5,182 samples, 2.90%)</title><rect x="48.7436%" y="101" width="2.8969%" height="15" fill="rgb(226,26,5)" fg:x="87194" fg:w="5182"/><text x="48.9936%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`free (11,214 samples, 6.27%)</title><rect x="45.4185%" y="117" width="6.2689%" height="15" fill="rgb(249,33,26)" fg:x="81246" fg:w="11214"/><text x="45.6685%" y="127.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (84 samples, 0.05%)</title><rect x="51.6405%" y="101" width="0.0470%" height="15" fill="rgb(235,183,28)" fg:x="92376" fg:w="84"/><text x="51.8905%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (527 samples, 0.29%)</title><rect x="51.6874%" y="117" width="0.2946%" height="15" fill="rgb(221,5,38)" fg:x="92460" fg:w="527"/><text x="51.9374%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2,957 samples, 1.65%)</title><rect x="51.9820%" y="117" width="1.6530%" height="15" fill="rgb(247,18,42)" fg:x="92987" fg:w="2957"/><text x="52.2320%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (333 samples, 0.19%)</title><rect x="53.6351%" y="117" width="0.1862%" height="15" fill="rgb(241,131,45)" fg:x="95944" fg:w="333"/><text x="53.8851%" y="127.50"></text></g><g><title>decrypt`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (41,944 samples, 23.45%)</title><rect x="30.9085%" y="133" width="23.4477%" height="15" fill="rgb(249,31,29)" fg:x="55290" fg:w="41944"/><text x="31.1585%" y="143.50">decrypt`core::ops::function::impls::_..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (957 samples, 0.53%)</title><rect x="53.8212%" y="117" width="0.5350%" height="15" fill="rgb(225,111,53)" fg:x="96277" fg:w="957"/><text x="54.0712%" y="127.50"></text></g><g><title>decrypt`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.01%)</title><rect x="54.4015%" y="69" width="0.0106%" height="15" fill="rgb(238,160,17)" fg:x="97315" fg:w="19"/><text x="54.6515%" y="79.50"></text></g><g><title>decrypt`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (43 samples, 0.02%)</title><rect x="54.3959%" y="85" width="0.0240%" height="15" fill="rgb(214,148,48)" fg:x="97305" fg:w="43"/><text x="54.6459%" y="95.50"></text></g><g><title>decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (106 samples, 0.06%)</title><rect x="54.3612%" y="117" width="0.0593%" height="15" fill="rgb(232,36,49)" fg:x="97243" fg:w="106"/><text x="54.6112%" y="127.50"></text></g><g><title>decrypt`hashbrown::raw::RawTable&lt;T,A&gt;::insert (59 samples, 0.03%)</title><rect x="54.3875%" y="101" width="0.0330%" height="15" fill="rgb(209,103,24)" fg:x="97290" fg:w="59"/><text x="54.6375%" y="111.50"></text></g><g><title>decrypt`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (21 samples, 0.01%)</title><rect x="54.4289%" y="37" width="0.0117%" height="15" fill="rgb(229,88,8)" fg:x="97364" fg:w="21"/><text x="54.6789%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.01%)</title><rect x="54.4406%" y="37" width="0.0129%" height="15" fill="rgb(213,181,19)" fg:x="97385" fg:w="23"/><text x="54.6906%" y="47.50"></text></g><g><title>decrypt`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (48 samples, 0.03%)</title><rect x="54.4272%" y="53" width="0.0268%" height="15" fill="rgb(254,191,54)" fg:x="97361" fg:w="48"/><text x="54.6772%" y="63.50"></text></g><g><title>decrypt`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (52 samples, 0.03%)</title><rect x="54.4255%" y="69" width="0.0291%" height="15" fill="rgb(241,83,37)" fg:x="97358" fg:w="52"/><text x="54.6755%" y="79.50"></text></g><g><title>decrypt`decrypt::get_words (180 samples, 0.10%)</title><rect x="54.3562%" y="133" width="0.1006%" height="15" fill="rgb(233,36,39)" fg:x="97234" fg:w="180"/><text x="54.6062%" y="143.50"></text></g><g><title>decrypt`serde_json::de::from_str (64 samples, 0.04%)</title><rect x="54.4210%" y="117" width="0.0358%" height="15" fill="rgb(226,3,54)" fg:x="97350" fg:w="64"/><text x="54.6710%" y="127.50"></text></g><g><title>decrypt`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (64 samples, 0.04%)</title><rect x="54.4210%" y="101" width="0.0358%" height="15" fill="rgb(245,192,40)" fg:x="97350" fg:w="64"/><text x="54.6710%" y="111.50"></text></g><g><title>decrypt`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (64 samples, 0.04%)</title><rect x="54.4210%" y="85" width="0.0358%" height="15" fill="rgb(238,167,29)" fg:x="97350" fg:w="64"/><text x="54.6710%" y="95.50"></text></g><g><title>decrypt`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,859 samples, 3.28%)</title><rect x="59.8447%" y="117" width="3.2753%" height="15" fill="rgb(232,182,51)" fg:x="107052" fg:w="5859"/><text x="60.0947%" y="127.50">dec..</text></g><g><title>decrypt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (25,127 samples, 14.05%)</title><rect x="54.4568%" y="133" width="14.0466%" height="15" fill="rgb(231,60,39)" fg:x="97414" fg:w="25127"/><text x="54.7068%" y="143.50">decrypt`hashbrown::ma..</text></g><g><title>decrypt`core::hash::BuildHasher::hash_one (9,630 samples, 5.38%)</title><rect x="63.1200%" y="117" width="5.3834%" height="15" fill="rgb(208,69,12)" fg:x="112911" fg:w="9630"/><text x="63.3700%" y="127.50">decrypt..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (448 samples, 0.25%)</title><rect x="72.4026%" y="117" width="0.2504%" height="15" fill="rgb(235,93,37)" fg:x="129516" fg:w="448"/><text x="72.6526%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8,079 samples, 4.52%)</title><rect x="73.8019%" y="101" width="4.5164%" height="15" fill="rgb(213,116,39)" fg:x="132019" fg:w="8079"/><text x="74.0519%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2,359 samples, 1.32%)</title><rect x="76.9995%" y="85" width="1.3187%" height="15" fill="rgb(222,207,29)" fg:x="137739" fg:w="2359"/><text x="77.2495%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18,108 samples, 10.12%)</title><rect x="68.5292%" y="133" width="10.1228%" height="15" fill="rgb(206,96,30)" fg:x="122587" fg:w="18108"/><text x="68.7792%" y="143.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10,731 samples, 6.00%)</title><rect x="72.6531%" y="117" width="5.9989%" height="15" fill="rgb(218,138,4)" fg:x="129964" fg:w="10731"/><text x="72.9031%" y="127.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (597 samples, 0.33%)</title><rect x="78.3182%" y="101" width="0.3337%" height="15" fill="rgb(250,191,14)" fg:x="140098" fg:w="597"/><text x="78.5682%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1,103 samples, 0.62%)</title><rect x="78.6520%" y="133" width="0.6166%" height="15" fill="rgb(239,60,40)" fg:x="140695" fg:w="1103"/><text x="78.9020%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1,054 samples, 0.59%)</title><rect x="79.2686%" y="133" width="0.5892%" height="15" fill="rgb(206,27,48)" fg:x="141798" fg:w="1054"/><text x="79.5186%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13,011 samples, 7.27%)</title><rect x="84.0376%" y="117" width="7.2735%" height="15" fill="rgb(225,35,8)" fg:x="150329" fg:w="13011"/><text x="84.2876%" y="127.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`free (20,540 samples, 11.48%)</title><rect x="79.8578%" y="133" width="11.4824%" height="15" fill="rgb(250,213,24)" fg:x="142852" fg:w="20540"/><text x="80.1078%" y="143.50">libsystem_malloc...</text></g><g><title>libsystem_malloc.dylib`nanov2_size (52 samples, 0.03%)</title><rect x="91.3111%" y="117" width="0.0291%" height="15" fill="rgb(247,123,22)" fg:x="163340" fg:w="52"/><text x="91.5611%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3,679 samples, 2.06%)</title><rect x="91.3485%" y="133" width="2.0567%" height="15" fill="rgb(231,138,38)" fg:x="163407" fg:w="3679"/><text x="91.5985%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3,973 samples, 2.22%)</title><rect x="93.4052%" y="133" width="2.2210%" height="15" fill="rgb(231,145,46)" fg:x="167086" fg:w="3973"/><text x="93.6552%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (90 samples, 0.05%)</title><rect x="95.6262%" y="133" width="0.0503%" height="15" fill="rgb(251,118,11)" fg:x="171059" fg:w="90"/><text x="95.8762%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (976 samples, 0.55%)</title><rect x="95.6765%" y="133" width="0.5456%" height="15" fill="rgb(217,147,25)" fg:x="171149" fg:w="976"/><text x="95.9265%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (552 samples, 0.31%)</title><rect x="96.2221%" y="133" width="0.3086%" height="15" fill="rgb(247,81,37)" fg:x="172125" fg:w="552"/><text x="96.4721%" y="143.50"></text></g><g><title>decrypt`std::sys_common::backtrace::__rust_begin_short_backtrace (168,687 samples, 94.30%)</title><rect x="2.2311%" y="149" width="94.3002%" height="15" fill="rgb(209,12,38)" fg:x="3991" fg:w="168687"/><text x="2.4811%" y="159.50">decrypt`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,489 samples, 0.83%)</title><rect x="96.5318%" y="149" width="0.8324%" height="15" fill="rgb(227,1,9)" fg:x="172679" fg:w="1489"/><text x="96.7818%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1,064 samples, 0.59%)</title><rect x="97.3642%" y="149" width="0.5948%" height="15" fill="rgb(248,47,43)" fg:x="174168" fg:w="1064"/><text x="97.6142%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1,459 samples, 0.82%)</title><rect x="97.9590%" y="149" width="0.8156%" height="15" fill="rgb(221,10,30)" fg:x="175232" fg:w="1459"/><text x="98.2090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1,143 samples, 0.64%)</title><rect x="98.7796%" y="149" width="0.6390%" height="15" fill="rgb(210,229,1)" fg:x="176700" fg:w="1143"/><text x="99.0296%" y="159.50"></text></g><g><title>decrypt`core::ops::function::FnOnce::call_once{{vtable.shim}} (178,880 samples, 100.00%)</title><rect x="0.0006%" y="165" width="99.9983%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="178880"/><text x="0.2506%" y="175.50">decrypt`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,038 samples, 0.58%)</title><rect x="99.4186%" y="149" width="0.5803%" height="15" fill="rgb(234,67,33)" fg:x="177843" fg:w="1038"/><text x="99.6686%" y="159.50"></text></g><g><title>decrypt`std::sys::unix::thread::Thread::new::thread_start (178,881 samples, 100.00%)</title><rect x="0.0006%" y="181" width="99.9989%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="178881"/><text x="0.2506%" y="191.50">decrypt`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>all (178,883 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="178883"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (178,882 samples, 100.00%)</title><rect x="0.0006%" y="213" width="99.9994%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="178882"/><text x="0.2506%" y="223.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (178,882 samples, 100.00%)</title><rect x="0.0006%" y="197" width="99.9994%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="178882"/><text x="0.2506%" y="207.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>